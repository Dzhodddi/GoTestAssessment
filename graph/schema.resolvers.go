package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"WorkAssigment/graph/model"
	"context"
	"fmt"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}

// Cat is the resolver for the cat field.
func (r *queryResolver) Cat(ctx context.Context) (*model.SpyCatInfo, error) {
	dbCat, err := r.catService.GetCatWithMissionAndTargets(ctx, 3)
	if err != nil {
		return nil, err
	}
	var targets []*model.Target
	for _, target := range dbCat.Target {
		t := &model.Target{
			ID:       int(target.ID),
			Name:     target.Name,
			Country:  target.Country,
			Notes:    target.Notes,
			Complete: target.Completed,
		}
		targets = append(targets, t)
	}
	mission := &model.Mission{
		ID:       int(dbCat.Mission.ID),
		Complete: dbCat.Mission.Completed,
		Targets:  targets,
	}
	cat := model.SpyCatInfo{
		ID:               int(dbCat.Cat.ID),
		Name:             dbCat.Cat.Name,
		YearOfExperience: int32(dbCat.Cat.Experience),
		Breed:            dbCat.Cat.Breed,
		Salary:           int32(dbCat.Cat.Salary),
		Mission:          mission,
	}
	return &cat, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
