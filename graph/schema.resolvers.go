package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"WorkAssigment/graph/model"
	"WorkAssigment/internal/store"
	"context"
	"log"
)

// CreateSpyCat is the resolver for the createSpyCat field.
func (r *mutationResolver) CreateSpyCat(ctx context.Context, input model.NewSpyCat) (*model.SpyCat, error) {
	err := r.catService.CreateSpyCat(ctx, &store.Cat{
		Name:       input.Name,
		Experience: int(input.YearOfExperience),
		Breed:      input.Breed,
		Salary:     int(input.Salary),
	})
	if err != nil {
		return nil, err
	}
	return &model.SpyCat{
		Name:             input.Name,
		YearOfExperience: input.YearOfExperience,
		Breed:            input.Breed,
		Salary:           input.Salary,
	}, nil
}

// Cat is the resolver for the cat field.
func (r *queryResolver) Cat(ctx context.Context, id int) (*model.SpyCatInfo, error) {
	log.Printf("Cat resolver called with id=%d, catService: %+v", id, r.catService)
	dbCat, err := r.catService.GetCatWithMissionAndTargets(ctx, int64(id))
	if err != nil {
		return nil, err
	}
	var targets []*model.Target
	for _, target := range dbCat.Target {
		t := &model.Target{
			ID:       int(target.ID),
			Name:     target.Name,
			Country:  target.Country,
			Notes:    target.Notes,
			Complete: target.Completed,
		}
		targets = append(targets, t)
	}
	var mission *model.Mission
	if dbCat.Mission != nil {
		mission = &model.Mission{
			ID:       int(dbCat.Mission.ID),
			Complete: dbCat.Mission.Completed,
			Targets:  targets,
		}
	}

	cat := model.SpyCatInfo{
		ID:               int(dbCat.Cat.ID),
		Name:             dbCat.Cat.Name,
		YearOfExperience: int32(dbCat.Cat.Experience),
		Breed:            dbCat.Cat.Breed,
		Salary:           int32(dbCat.Cat.Salary),
		Mission:          mission,
	}
	return &cat, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
